<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.machineFile org.eventb.core.configuration="org.eventb.core.fwd" org.eventb.texttools.text_lastmodified="1353587985432" org.eventb.texttools.text_representation="machine ADSTrackingAndWarnings refines ADS  sees ctxAmbulance ctxHospital ctxStatus&#10;&#10;variables incident ambulance hospital incidentEmergencyLevel incidentCapabilityRequirements ambulanceAllocation hospitalAllocation&#10;          reducedResponseCounter&#10;          /* reducedResponseCounter to monitor the system state&#10;             (workaround as using card() often causes problems with discharging proof obligations) */&#10;          incidentStatus&#10;          /* at any stage each incident has to have a status (see ctxStatus for possible values)&#10;             THIS REFINED MACHINE IMPLEMENTS THE WARNING AND REPORTING REQUIREMENTS */&#10;&#10;&#10;invariants&#10;  @counterType reducedResponseCounter ∈ ℕ&#10;  @incidentStatusType incidentStatus ∈ incident → INCIDENT_STATUS&#10;  @proofChecks1 finite(incident)&#10;  @proofChecks2 finite(incidentStatus)&#10;&#10;events&#10;  event INITIALISATION extends INITIALISATION&#10;    then&#10;      @act8 reducedResponseCounter ≔ 0&#10;      @act9 incidentStatus ≔ ∅&#10;  end&#10;&#10;  event logIncident extends logIncident&#10;    then&#10;      @act4 incidentStatus(i) ≔  Logged // incidents are initially marked as logged (logged incidents form the queue)&#10;  end&#10;&#10;  event fullResponseAllocation extends allocateAmbulanceToIncident&#10;    where&#10;      @checkCapabilities incidentCapabilityRequirements(i) ⊆ ambulanceCapabilities(a)&#10;      /* only enabled if there is at least one ambulance that can provide a full&#10;         response to an incident in the current queue (logged incidents) */&#10;    then&#10;      @act2 incidentStatus(i) ≔ Allocated // change incident status&#10;  end&#10;&#10;  event reducedResponseAllocation extends allocateAmbulanceToIncident&#10;    where&#10;      @checkReducedResponce ∀amb · (amb ∈ ambulance ∖ dom(ambulanceAllocation)&#10;            ⇒ ∀inc · (inc ∈ allocatableIncident&#10;            ⇒ incidentCapabilityRequirements(inc) ⊈ ambulanceCapabilities(amb)))&#10;      /* only enabled if there are no ambulances that could provide a full&#10;         response to any of the allocatable incidents */&#10;    then&#10;      @act2 incidentStatus(i) ≔ Allocated&#10;      @act3 reducedResponseCounter ≔  reducedResponseCounter + 1 // increment the reduced response counter&#10;  end&#10;&#10;  event allocateIncidentToHospital extends allocateIncidentToHospital&#10;  end&#10;&#10;  event REPORT_IncidentArrival&#10;    any a&#10;    where&#10;      @aParam a ∈ dom(ambulanceAllocation) // must be an ambulance with an allocated incident&#10;      @checkStatus incidentStatus(ambulanceAllocation(a)) = Allocated // ... that hasn't arrived yet&#10;    then&#10;      @act1 incidentStatus(ambulanceAllocation(a)) ≔ Attended // register arrival to the scene of the incident&#10;  end&#10;&#10;  event REPORT_HospitalArrival&#10;    any a&#10;    where&#10;      @aParam a ∈ dom(ambulanceAllocation) // must be a currently allocated ambulance&#10;      @checkHospital {a}◁(ambulanceAllocation;hospitalAllocation) ≠ ∅ // hospital must be allocated&#10;      @checkStatus incidentStatus(ambulanceAllocation(a)) = Attended // not yet delivered to hospital&#10;    then&#10;      @act1 incidentStatus(ambulanceAllocation(a)) ≔ Hospitalised&#10;      /* @act1&#9;hospitalisedIncident ≔ hospitalisedIncident ∪ {ambulanceAllocation(a)}&#10;         register arrival to the allocated hospital */&#10;  end&#10;&#10;  event REPORT_AmbulanceBackAtBase extends setAmbulanceAvailable&#10;    where&#10;      @checkStatus incidentStatus(ambulanceAllocation(a)) = Hospitalised&#10;      /* ambulance can only arrive back at its base when it has delivered&#10;         the patient (incident) to the allocated hospital&#10;         Arrival to the base makes the ambulance available for another allocation */&#10;  end&#10;&#10;  event WARNING_QueueThresholdReached // enabled when queue threshold reached&#10;    where&#10;      @proofsGrd1 finite(incidentStatus ▷ {Logged}) // helps to discharge the card proof in guard 2&#10;      @checkThreashold card(incidentStatus ▷ {Logged}) ≥ QUEUE_THRESHOLD // threshold condition&#10;  end&#10;&#10;  event WARNING_ReducedResponseThresholdExceeded // enabled when reduced response threshold exceeded&#10;    where&#10;      @checkReducedResponce card(incidentStatus ⩥ {Logged}) ∗ REDUCED_RESPONSE_PERCENTAGE_THRESHOLD&#10;            &lt; reducedResponseCounter ∗ 100&#10;  end&#10;&#10;  event addAmbulance extends addAmbulance&#10;  end&#10;&#10;  event addHospital extends addHospital&#10;  end&#10;end&#10;" version="5">
<org.eventb.core.refinesMachine name="_UF-cIDSZEeKIHaPt6d5fNA" org.eventb.core.target="ADS"/>
<org.eventb.core.seesContext name="_UF-cITSZEeKIHaPt6d5fNA" org.eventb.core.target="ctxAmbulance"/>
<org.eventb.core.seesContext name="_UF_DMDSZEeKIHaPt6d5fNA" org.eventb.core.target="ctxHospital"/>
<org.eventb.core.seesContext name="_UF_DMTSZEeKIHaPt6d5fNA" org.eventb.core.target="ctxStatus"/>
<org.eventb.core.variable name="_Tu9hQzDeEeK1r57p0SSIEg" org.eventb.core.identifier="incident"/>
<org.eventb.core.variable name="_Tu9hRDDeEeK1r57p0SSIEg" org.eventb.core.identifier="ambulance"/>
<org.eventb.core.variable name="_Tu9hRTDeEeK1r57p0SSIEg" org.eventb.core.identifier="hospital"/>
<org.eventb.core.variable name="_GmEMwDQdEeK2JagZ1s_v9g" org.eventb.core.identifier="incidentEmergencyLevel"/>
<org.eventb.core.variable name="_Tu-IUTDeEeK1r57p0SSIEg" org.eventb.core.identifier="incidentCapabilityRequirements"/>
<org.eventb.core.variable name="_Tu-IUjDeEeK1r57p0SSIEg" org.eventb.core.identifier="ambulanceAllocation"/>
<org.eventb.core.variable name="_Tu-IUzDeEeK1r57p0SSIEg" org.eventb.core.identifier="hospitalAllocation"/>
<org.eventb.core.variable name="_Tu-vYDDeEeK1r57p0SSIEg" org.eventb.core.comment="reducedResponseCounter to monitor the system state&#10;             (workaround as using card() often causes problems with discharging proof obligations) " org.eventb.core.identifier="reducedResponseCounter"/>
<org.eventb.core.variable name="_o18iEDDeEeK1r57p0SSIEg" org.eventb.core.comment="at any stage each incident has to have a status (see ctxStatus for possible values)&#10;             THIS REFINED MACHINE IMPLEMENTS THE WARNING AND REPORTING REQUIREMENTS " org.eventb.core.identifier="incidentStatus"/>
<org.eventb.core.invariant name="_g4IC8DQrEeK4AKZX5m6UFA" org.eventb.core.label="counterType" org.eventb.core.predicate="reducedResponseCounter ∈ ℕ"/>
<org.eventb.core.invariant name="_5p9aUDQqEeK4AKZX5m6UFA" org.eventb.core.label="incidentStatusType" org.eventb.core.predicate="incidentStatus ∈ incident → INCIDENT_STATUS"/>
<org.eventb.core.invariant name="_8l2jsDQqEeK4AKZX5m6UFA" org.eventb.core.label="proofChecks1" org.eventb.core.predicate="finite(incident)"/>
<org.eventb.core.invariant name="_8l3x0DQqEeK4AKZX5m6UFA" org.eventb.core.label="proofChecks2" org.eventb.core.predicate="finite(incidentStatus)"/>
<org.eventb.core.event name="'" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="INITIALISATION">
<org.eventb.core.action name="_hYXAEDDnEeK1r57p0SSIEg" org.eventb.core.assignment="reducedResponseCounter ≔ 0" org.eventb.core.label="act8"/>
<org.eventb.core.action name="_TvAkkDDeEeK1r57p0SSIEg" org.eventb.core.assignment="incidentStatus ≔ ∅" org.eventb.core.label="act9"/>
</org.eventb.core.event>
<org.eventb.core.event name="_TvAkkzDeEeK1r57p0SSIEg" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="logIncident">
<org.eventb.core.refinesEvent name="_UGG_ADSZEeKIHaPt6d5fNA" org.eventb.core.target="logIncident"/>
<org.eventb.core.action name="_TvBLoTDeEeK1r57p0SSIEg" org.eventb.core.assignment="incidentStatus(i) ≔  Logged" org.eventb.core.comment="incidents are initially marked as logged (logged incidents form the queue)" org.eventb.core.label="act4"/>
</org.eventb.core.event>
<org.eventb.core.event name="_TvBLojDeEeK1r57p0SSIEg" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="fullResponseAllocation">
<org.eventb.core.refinesEvent name="_UGINIDSZEeKIHaPt6d5fNA" org.eventb.core.target="allocateAmbulanceToIncident"/>
<org.eventb.core.guard name="_AEWg4DSZEeKIHaPt6d5fNA" org.eventb.core.comment="only enabled if there is at least one ambulance that can provide a full&#10;         response to an incident in the current queue (logged incidents) " org.eventb.core.label="checkCapabilities" org.eventb.core.predicate="incidentCapabilityRequirements(i) ⊆ ambulanceCapabilities(a)"/>
<org.eventb.core.action name="_TvByszDeEeK1r57p0SSIEg" org.eventb.core.assignment="incidentStatus(i) ≔ Allocated" org.eventb.core.comment="change incident status" org.eventb.core.label="act2"/>
</org.eventb.core.event>
<org.eventb.core.event name="_TvCZwDDeEeK1r57p0SSIEg" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="reducedResponseAllocation">
<org.eventb.core.refinesEvent name="_UGKpYDSZEeKIHaPt6d5fNA" org.eventb.core.target="allocateAmbulanceToIncident"/>
<org.eventb.core.guard name="_D_L-wDSZEeKIHaPt6d5fNA" org.eventb.core.comment="only enabled if there are no ambulances that could provide a full&#10;         response to any of the allocatable incidents " org.eventb.core.label="checkReducedResponce" org.eventb.core.predicate="∀amb · (amb ∈ ambulance ∖ dom(ambulanceAllocation)&#10;            ⇒ ∀inc · (inc ∈ allocatableIncident&#10;            ⇒ incidentCapabilityRequirements(inc) ⊈ ambulanceCapabilities(amb)))"/>
<org.eventb.core.action name="_TvDA0TDeEeK1r57p0SSIEg" org.eventb.core.assignment="incidentStatus(i) ≔ Allocated" org.eventb.core.label="act2"/>
<org.eventb.core.action name="_TvDA0jDeEeK1r57p0SSIEg" org.eventb.core.assignment="reducedResponseCounter ≔  reducedResponseCounter + 1" org.eventb.core.comment="increment the reduced response counter" org.eventb.core.label="act3"/>
</org.eventb.core.event>
<org.eventb.core.event name="_TvDA0zDeEeK1r57p0SSIEg" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="allocateIncidentToHospital">
<org.eventb.core.refinesEvent name="_UGMekDSZEeKIHaPt6d5fNA" org.eventb.core.target="allocateIncidentToHospital"/>
</org.eventb.core.event>
<org.eventb.core.event name="_TvDn4TDeEeK1r57p0SSIEg" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="REPORT_IncidentArrival">
<org.eventb.core.parameter name="_TvDn4jDeEeK1r57p0SSIEg" org.eventb.core.identifier="a"/>
<org.eventb.core.guard name="_HsTwwDSZEeKIHaPt6d5fNA" org.eventb.core.comment="must be an ambulance with an allocated incident" org.eventb.core.label="aParam" org.eventb.core.predicate="a ∈ dom(ambulanceAllocation)"/>
<org.eventb.core.guard name="_IuSyMDSZEeKIHaPt6d5fNA" org.eventb.core.comment="... that hasn't arrived yet" org.eventb.core.label="checkStatus" org.eventb.core.predicate="incidentStatus(ambulanceAllocation(a)) = Allocated"/>
<org.eventb.core.action name="_TvEO8TDeEeK1r57p0SSIEg" org.eventb.core.assignment="incidentStatus(ambulanceAllocation(a)) ≔ Attended" org.eventb.core.comment="register arrival to the scene of the incident" org.eventb.core.label="act1"/>
</org.eventb.core.event>
<org.eventb.core.event name="_TvEO8jDeEeK1r57p0SSIEg" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="REPORT_HospitalArrival">
<org.eventb.core.parameter name="_TvE2ADDeEeK1r57p0SSIEg" org.eventb.core.identifier="a"/>
<org.eventb.core.guard name="_KE5YwDSZEeKIHaPt6d5fNA" org.eventb.core.comment="must be a currently allocated ambulance" org.eventb.core.label="aParam" org.eventb.core.predicate="a ∈ dom(ambulanceAllocation)"/>
<org.eventb.core.guard name="_LWXAoDSZEeKIHaPt6d5fNA" org.eventb.core.comment="hospital must be allocated" org.eventb.core.label="checkHospital" org.eventb.core.predicate="{a}◁(ambulanceAllocation;hospitalAllocation) ≠ ∅"/>
<org.eventb.core.guard name="_MKz8YDSZEeKIHaPt6d5fNA" org.eventb.core.comment="not yet delivered to hospital" org.eventb.core.label="checkStatus" org.eventb.core.predicate="incidentStatus(ambulanceAllocation(a)) = Attended"/>
<org.eventb.core.action name="_TvFdEjDeEeK1r57p0SSIEg" org.eventb.core.assignment="incidentStatus(ambulanceAllocation(a)) ≔ Hospitalised" org.eventb.core.comment="@act1&#9;hospitalisedIncident ≔ hospitalisedIncident ∪ {ambulanceAllocation(a)}&#10;         register arrival to the allocated hospital " org.eventb.core.label="act1"/>
</org.eventb.core.event>
<org.eventb.core.event name="_TvGEIDDeEeK1r57p0SSIEg" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="REPORT_AmbulanceBackAtBase">
<org.eventb.core.refinesEvent name="_UGTzUDSZEeKIHaPt6d5fNA" org.eventb.core.target="setAmbulanceAvailable"/>
<org.eventb.core.guard name="_NVZgMTSZEeKIHaPt6d5fNA" org.eventb.core.comment="ambulance can only arrive back at its base when it has delivered&#10;         the patient (incident) to the allocated hospital&#10;         Arrival to the base makes the ambulance available for another allocation " org.eventb.core.label="checkStatus" org.eventb.core.predicate="incidentStatus(ambulanceAllocation(a)) = Hospitalised"/>
</org.eventb.core.event>
<org.eventb.core.event name="_TvGrMDDeEeK1r57p0SSIEg" org.eventb.core.comment="enabled when queue threshold reached" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="WARNING_QueueThresholdReached">
<org.eventb.core.guard name="_PQ6KoDSZEeKIHaPt6d5fNA" org.eventb.core.comment="helps to discharge the card proof in guard 2" org.eventb.core.label="proofsGrd1" org.eventb.core.predicate="finite(incidentStatus ▷ {Logged})"/>
<org.eventb.core.guard name="_RKHH8DSZEeKIHaPt6d5fNA" org.eventb.core.comment="threshold condition" org.eventb.core.label="checkThreashold" org.eventb.core.predicate="card(incidentStatus ▷ {Logged}) ≥ QUEUE_THRESHOLD"/>
</org.eventb.core.event>
<org.eventb.core.event name="_TvGrMjDeEeK1r57p0SSIEg" org.eventb.core.comment="enabled when reduced response threshold exceeded" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="WARNING_ReducedResponseThresholdExceeded">
<org.eventb.core.guard name="_UGXdsDSZEeKIHaPt6d5fNA" org.eventb.core.label="checkReducedResponce" org.eventb.core.predicate="card(incidentStatus ⩥ {Logged}) ∗ REDUCED_RESPONSE_PERCENTAGE_THRESHOLD&#10;            &lt; reducedResponseCounter ∗ 100"/>
</org.eventb.core.event>
<org.eventb.core.event name="_TvHSQTDeEeK1r57p0SSIEg" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="addAmbulance">
<org.eventb.core.refinesEvent name="_UGYr0DSZEeKIHaPt6d5fNA" org.eventb.core.target="addAmbulance"/>
</org.eventb.core.event>
<org.eventb.core.event name="_TvH5UDDeEeK1r57p0SSIEg" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.label="addHospital">
<org.eventb.core.refinesEvent name="_UGZS4DSZEeKIHaPt6d5fNA" org.eventb.core.target="addHospital"/>
</org.eventb.core.event>
</org.eventb.core.machineFile>
